from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

btn_confirm = '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'
btn_all_right = '‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ'
btn_cancel = 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å'
btn_change = '‚úçÔ∏è  –ò–∑–º–µ–Ω–∏—Ç—å'
btn_ready = '‚úÖ  –ì–æ—Ç–æ–≤–æ'
btn_back = 'üëà –ù–∞–∑–∞–¥'

btn_add_balance = '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'
btn_make_payment = 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å'
btn_link_for_payment = 'üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É'

btn_delete = '–£–¥–∞–ª–∏—Ç—å'
btn_add_new = '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π'

btn_answer = '–û—Ç–≤–µ—Ç–∏—Ç—å'
btn_discard = '–û—Ç–∫–ª–æ–Ω–∏—Ç—å'


def notice_markup():
    markup = InlineKeyboardMarkup()
    notices_names = {'move': '–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ', 'supply': '–ü—Ä–∏–µ–º–∫–∞',
                    'purchaseorder': '–ó–∞–∫–∞–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞', 'productiontask': '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ',
                    #'other': '–î—Ä—É–≥–æ–µ'
                     }
    for doc, name in notices_names.items():
        markup.row(InlineKeyboardButton(name, callback_data=f'notice_doc:{doc}'))

    return markup


def doc_markup(name, notice):
    button_mappings = {
        'move': [('–ê—Ä—Ç–∏–∫—É–ª', 'article'), ('–ù–∞ —Å–∫–ª–∞–¥', 'target_store'), ('–°–æ —Å–∫–ª–∞–¥–∞', 'source_store'), ('–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'text')],
        'supply': [('–ê—Ä—Ç–∏–∫—É–ª', 'article'), ('–ù–∞ —Å–∫–ª–∞–¥', 'target_store'), ('–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç', 'agent'), ('–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'text')],
        'purchaseorder': [('–ê—Ä—Ç–∏–∫—É–ª', 'article'), ('–ù–∞ —Å–∫–ª–∞–¥', 'target_store'), ('–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç', 'agent'), ('–î–Ω–µ–π –¥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'days'), ('–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'text')],
        'productiontask': [('–ê—Ä—Ç–∏–∫—É–ª', 'article'), ('–î–Ω–µ–π –¥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'days'), ('–§–∞–±—Ä–∏–∫–∞', 'material_store'), ('–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'text')],
        'other': [('–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Ç–æ–≤–∞—Ä', 'out_stock'), ('–ª–µ–∂–∏—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ –±–æ–ª–µ–µ...', 'oborot')]
    }

    markup = InlineKeyboardMarkup()
    markup.row(InlineKeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ' if notice[name]['turn_on'] else '–í–∫–ª—é—á–∏—Ç—å –≤—Å–µ', callback_data=f'notice_filters:turn_on'))
    markup.row(InlineKeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å –Ω–æ–≤—ã–µ' if notice[name]['send_new'] else '–í–∫–ª—é—á–∏—Ç—å –Ω–æ–≤—ã–µ', callback_data=f'notice_filters:send_new'))
    markup.row(InlineKeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ' if notice[name]['send_updated'] else '–í–∫–ª—é—á–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ', callback_data=f'notice_filters:send_updated'))
    markup.row(InlineKeyboardButton('–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ' if notice[name]['applicable'] else '–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ', callback_data=f'notice_filters:applicable'))

    for text, data in button_mappings.get(name, []):
        markup.row(InlineKeyboardButton(text, callback_data=f'notice_filters:{data}'))
    markup.row(InlineKeyboardButton(btn_back, callback_data=f'notice_filters:back'))
    return markup


def store_markup(stores, choice):
    markup = InlineKeyboardMarkup()
    for store in stores:
        s = '‚úÖ ' if store['id'] in choice else ''
        markup.row(InlineKeyboardButton(s + store['name'], callback_data=f'notice_filter_store:{store["id"]}'))
    markup.row(InlineKeyboardButton(btn_ready, callback_data=f'notice_filter_store:confirm'))
    return markup


def days_markup(choice):
    markup = InlineKeyboardMarkup()
    days = [0, 3, 7, 14]
    for day in days:
        s = '‚úÖ ' if day in choice else ''
        markup.row(InlineKeyboardButton(f'{s} {day} –¥–Ω–µ–π', callback_data=f'notice_filter_days:{day}'))
    markup.row(InlineKeyboardButton(btn_ready, callback_data=f'notice_filter_days:confirm'))
    return markup


def text_settings_markup(choice, doc_name):
    text_settings = {'sum': '–°—É–º–º–∞', 'quantity': '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'articles_text': '–ê—Ä—Ç–∏–∫—É–ª—ã –≤ —Å—Ç—Ä–æ—á–∫—É',
                     'description': '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
                     'positions': '–ü–æ–∑–∏—Ü–∏–∏'}
    if doc_name == 'move':
        text_settings = text_settings | {'source_store': '–°–æ —Å–∫–ª–∞–¥–∞', 'target_store': '–ù–∞ —Å–∫–ª–∞–¥', }
    elif doc_name in ['supply', 'purchaseorder']:
        text_settings = text_settings | {'agent': '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç', 'target_store': '–ù–∞ —Å–∫–ª–∞–¥', }
    elif doc_name == 'productiontask':
        text_settings = text_settings | {'produced_quantity': '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', 'material_store': '–¶–µ—Ö', }
    markup = InlineKeyboardMarkup()
    for t in text_settings:
        s = '‚úÖ ' if t in choice else ''
        markup.row(InlineKeyboardButton(f'{s} {text_settings[t]}', callback_data=f'notice_text:{t}'))
    markup.row(InlineKeyboardButton(btn_ready, callback_data=f'notice_text:confirm'))
    return markup
